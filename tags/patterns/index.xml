<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Patterns on donbstringham</title>
    <link>http://donbstringham.us/tags/patterns/</link>
    <description>Recent content in Patterns on donbstringham</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Tue, 23 Dec 2014 22:47:30 -0700</lastBuildDate>
    
	<atom:link href="http://donbstringham.us/tags/patterns/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Service Locator vs. Dependency Injection Container</title>
      <link>http://donbstringham.us/post/2014-12-23-service-locator-vs-dependency-injection-container/</link>
      <pubDate>Tue, 23 Dec 2014 22:47:30 -0700</pubDate>
      
      <guid>http://donbstringham.us/post/2014-12-23-service-locator-vs-dependency-injection-container/</guid>
      <description>I am NOT as crazy as I thought!
Over the last few years of learning to incorporate Java-like patterns into my PHP development practices one area seemed to drive me crazy, almost to the point of second guessing myself about dependency injection altogether. Years ago I learned from Misko Hevery from Google that a service locator is really just global state or a bad singleton in sheep&amp;rsquo;s clothing. He states that a service locator violates the Law of Demeter and calls singletons are pathological liars.</description>
    </item>
    
    <item>
      <title>DDD in PHP Experiment</title>
      <link>http://donbstringham.us/post/2014-12-11-ddd-in-php-experiment/</link>
      <pubDate>Thu, 11 Dec 2014 12:52:29 -0700</pubDate>
      
      <guid>http://donbstringham.us/post/2014-12-11-ddd-in-php-experiment/</guid>
      <description>Domain-Driven Design in PHP Experiment and Project Seed
A current and difficult software development project has recently sent me scurrying for answers. In that search I&amp;rsquo;ve rediscovered the book Domain-Driven Design: Tackling Complexity in the Heart of Software by Eric Evans. In addition to re-reading the book and reviewing a handful of slide-decks at SlideShare; I have found that there a few different and even wide varying implementations of the principles of domain-driven design.</description>
    </item>
    
  </channel>
</rss>